* idées
** idées perso
*** org capture
**** templates 
***** à implémenter
:PROPERTIES:
:item_type:     definition
:END:
(org-set-property "item" "definition")
pour les étudiants comme moi:
- capture todo
  - cours (voir comment mettre priorité)
    - a réécrire/écrire
    - dig deeper
    - exercice
    - pas compris 
   - 

***** actuel
#+begin_src emacs-lisp 
   #+begin_src emacs-lisp
 (setq org-capture-templates
 '( 

  ("f" "coFFre à inFormations utiles")

    ("fc" "Citations" entry (file "capture/coffre/coffre_citations.org")
     "* %^{Nom?} %^g \n%^{source}p\n%i %? " :empty-lines 1)

    ("fm" "Math tricks" entry (file "capture/coffre/coffre_citations.org")
     "* %? " :empty-lines 1)

    ("fp" "Programmation")
    ("fpp" "Python" entry (file+headline "capture/coffre/coffre_programmation.org" "python")
     "* %^{Nom du bout de code?} \n%^{source}p %^{description}p \n#+begin_src python\n%i%?\n#+end_src
 \n%u" :empty-lines 1)
    ("fpc" "C++" entry (file+headline "capture/coffre/coffre_programmation.org" "C++")
     "* %^{Nom du bout de code?} \n%^{source}p %^{description}p \n#+begin_src C++\n%i%?\n#+end_src
 \n%u" :empty-lines 1)
    ("fpr" "R" entry (file+headline "capture/coffre/coffre_programmation.org" "R")
     "* %^{Nom du bout de code?} \n%^{source}p %^{description}p \n#+begin_src R\n%i%?\n#+end_src
 \n%u" :empty-lines 1)
    ("fpl" "lisp" entry (file+headline "capture/coffre/coffre_programmation.org" "emacs-lisp")
     "* %^{Nom du bout de code?} \n%^{source}p %^{description}p \n#+begin_src emacs-lisp\n%i%?\n#+end_src
 \n%u" :empty-lines 1)

    ("fd" "sujets Divers et variés" entry (file+headline "capture/coffre/coffre_divers.org" "Divers")
     "* %^{Nom de l'entrée?} %^g \n%^{source}p \n%i%?\n%u" :empty-lines 1)

  ("i" "Idées (moins urgent que TODOs)")
    ("ip" "Petites idées" entry (file+headline "capture/idees.org" "Petite")
     "* %?\n%i\n
 %u" :empty-lines 1)
    ("ig" "Grosses idées" entry (file+headline "capture/idees.org" "Grosse")
     "* %?\n%i\n
 %u" :empty-lines 1)


  ("l" "Listes de choses à voir ou sur lesquelles se renseigner")
    ("lo" "Œuvres" entry (file+headline "capture/coffre/coffre_a_voir.org" "Œuvres")
     "* %^{Nom de l'œuvre?} \n:PROPERTIES:
 :importance: %^{importance entre 0 et 5?}
 :source: %^{source?}
 :type: %^{type?|none|livre|film|site|article|autre}
 :END:\n%i%?
 %u" :empty-lines 1)
    ("ls" "Sujets/idées/concepts sur lesquels se renseigner" entry (file+headline "capture/coffre/coffre_a_voir.org" "Sujets/Idées/Concepts")
     "* %^{Nom?} %^g \n:PROPERTIES:
 :importance: %^{importance entre 0 et 5?}
 :END:\n%i%?
 %u" :empty-lines 1)

  ("t" "Todos")
  ("tc" "Cours" entry (file+headline "capture/todos.org" "Cours")
   "* TODO %? \n%i\n%a %U" :empty-lines 1)
  ("to" "Optil" entry (file+headline "capture/todos.org" "Optil")
   "* TODO %? \n%i\n%a %U" :empty-lines 1)
  ("tp" "Perso" entry (file+headline "capture/todos.org" "Perso")
   "* TODO %? \n%i\n%a %U" :empty-lines 1)
  ("tr" "Regulier, choses qui reviennent souvent comme le loyer" entry (file+headline "capture/todos.org" "Regulier")
   "* TODO %? \n%i\n%a %U" :empty-lines 1)
  ("ts" "Social" entry (file+headline "capture/todos.org" "Social")
   "* TODO %? \n%i\n%a %U" :empty-lines 1)
  ("ta" "Autres" entry (file+headline "capture/todos.org" "Autres")
   "* TODO %? \n%i\n%a %U" :empty-lines 1)
 
  ("j" "Journal" entry (file+datetree "capture/journal.org")
   "* %i%?\nEntered on %U" :empty-lines 1)

  ("a" "Autres" entry (file "capture/autres.org")
   "* %i%? \n%u" :empty-lines 1)

 ))

  #+end_src
#+end_src
**** adding property drawer

#+begin_src emacs-lisp 
(defun lkr/add-property-with-date-captured ()
  "Add DATE_CAPTURED property to the current item."
  (interactive)
  (org-set-property "TIME_CAPTURED" (format-time-string "%F")))

(add-hook 'org-capture-before-finalize-hook 'add-property-with-date-captured)
#+end_src

*** categorize everything
**** tag/property an entire file
to tag every header in a file:
#+begin_src .org file
#+FILETAGS: :Peter:Boss:Secret:
#+end_src

to put a property on every header in a file:
#+begin_src .org file
#+property: thing
#+end_src

***
**** property in courses
***** how to 
C-c C-x p
to set a property
maybe there is a way to have default values of properties?

maybe there is a way, with a function, to visit every header of a
file, and to select if it is either
definition/property/lemma/theorem... just by pressing d p l or t,
automatically going in the next header until it's the end.


***** interesting properties
- item_type:
  - definition
  - lemma
  - property
  - explanation
  - exercice
  - demonstration
  - scheme (or maybe not, or "figure_present: yes", since it's often a
    figure with something)
- prerequisite: things needed to understand the course
- speakers: professors or tdperson

*** open any org file in ~
- working version
#+begin_src emacs-lisp 
(find-file
(completing-read "file to open: "
            (split-string (shell-command-to-string 
                           "fd . /home/mehdi/ -t f") 
                           "\n")))
#+end_src

building blocks:
#+begin_src emacs-lisp 
(substring ".test" 1)
(concat "/e/" "do/")
(find-file "/home/mehdi/dossiers/truc.txt")
(split-string "machin 
truc
muche" "\n")
(shell-command-to-string "echo hehe")
(substring "#hey" 1)
#+end_src

*** pdftools
comment annoter sur des pdf?

** idées/méthodes externes
https://blog.jethro.dev/posts/how_to_take_smart_notes_org/
https://rgoswami.me/posts/org-note-workflow/
https://writingcenter.uconn.edu/wp-content/uploads/sites/593/2014/06/How_to_Summarize_a_Research_Article1.pdf
* cool ressources
** other stuff
https://mathpix.com/

** useful emacs packages
*** org mode
**** org agenda
***** customize the view
https://orgmode.org/guide/Custom-Agenda-Views.html
you can do it nicely if you know how to search well:
https://orgmode.org/guide/Matching-Tags-and-Properties.html

**** other stuff
https://orgmode.org/worg/org-tidy.html
**** org searching
might be useful for the wiki
https://orgmode.org/worg/org-tutorials/advanced-searching.html

defining properties
https://orgmode.org/guide/Properties.html

*** org external packages
**** org-ql
https://github.com/alphapapa/org-ql
**** org super agenda
this seems very good!
https://github.com/alphapapa/org-super-agenda

**** org roam 
[[https://github.com/org-roam/org-roam][github]]
[[https://www.orgroam.com/manual.html][manual]]
**** org roam bibtex
https://github.com/org-roam/org-roam-bibtex
**** org noter
*** other useful packages
https://github.com/tmalsburg/helm-bibtex

anki like cards
https://www.leonrische.me/fc/index.html

converting picture equations into latex
https://github.com/jethrokuan/mathpix.el

* my workflow
** orgmode
*** managing tables
[[https://sachachua.com/blog/2019/10/python-org-mode-and-writing-org-tables-to-csvs-so-that-i-can-read-them-back/][tables into csv and other stuff]]
*** importing self updating csv files
There is a way to import csv file as table in org mode!
Like this, you just need to execute all code blocks

(C-c C-v C-b org-babel-execute-buffer)

To update all the tables!! You can even have a bash code block that
copies the tables in their origin directory to the .org directory like
so:

#+begin_src bash
cp sourcefile outputfile
#+end_src

(look at [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][this tutorial]] to understand everything done here)

#+name: panda2org
#+begin_src python :var df="df" :exports none
  return f"return tabulate({df}, headers={df}.columns, tablefmt='orgtbl')"
#+end_src

#+header: :prologue from tabulate import tabulate
#+header: :noweb strip-export
#+begin_src python :results value raw :exports results
  import pandas as pd
  filename = "/home/mehdi/dossiers/ilm/mesures_brevet_condense/rapport/atelier/archive/metals_csv_young.csv"
  df = pd.read_csv(filename, index_col=0)

  <<panda2org("df")>>
#+end_src

#+RESULTS:
|                | Module de Young | Intervalle de confiance (95%) |
|----------------+-----------------+-------------------------------|
| acier 304-L    |           169.3 |                             9 |
| aluminium AG5  |            69.4 |                           3.3 |
| aluminium AU4G |            67.2 |                           4.2 |
| cuivre         |             103 |                            15 |
| laiton         |            94.6 |                           8.8 |
| nickel         |             218 |                            14 |
| titane T6AV    |           116.9 |                           4.4 |
| tantale        |             192 |                            16 |
| molybdène      |             300 |                           120 |
| fonte          |           151.7 |                           9.1 |

\newpage

** python
*** managing data
**** panda

[[https://pandas.pydata.org/docs/getting_started/index.html][tutorials]]

*** directory tree to manage experience and scripts
the file tree can look like that:
(I prefer the second way)
**** first_way:experiment folder
***** raw data
these are not modified, they serve as proof/backup
***** processing
****** processed_data
The output of pre_processing scripts if needed
****** scripts
******* general functions
If you need some general functions that you use in many scripts
******* python scripts
The scripts that do stuff with your data
******** raw data processing scripts
If you need to process the raw data so that it can become usable in a
script.
******** processable data scripts
Scripts that are done and that do the stuff you want
******** workshop
Scripts you're working on and are not yet done, or stuff you're testing
******* output
To save something in this directory, a script that is for instance in
processable_data_scripts should save in

=../../output/test_output=

Easy !
******** test output
The output of weird stuff you're trying to do in the workshop 
******** intermediate output
The output that are interesting, done, but for yourself
******** report output
The stuff that is beautiful/correct enough so that you can put it in
your report.

Like this, you can just copy this entire file in the .tex directory
and have everything updated when necessary

you can even have a script that searches for every "report output" in
each "experiment{}".format(experiment_number) and copying it in
"{}_report_ressources".format(experiment_name) for instance...

********* figures
Separating figures and tables is nice if you have a large number of them
********* tables (csv files)
***** pre_processing
if needed, takes the raw data and process it to make it easier to use

**** second_way
if you want to do it:
#+begin_src bash
touch Makefile
touch dir_variables.py
mkdir raw_data_experiment
mkdir pre_processing/output/ -p
mkdir pre_processing/scripts/ -p
mkdir pre_processing/input/ -p
mkdir processing/output/ -p
mkdir processing/scripts/ -p
mkdir processing/input/ -p
mkdir post_processing/output/ -p
mkdir post_processing/scripts/ -p
mkdir post_processing/input/ -p
#+end_src
dir_variables.py
***** raw_data_experiment
The raw data of your experiment.

It's way easier to deal with if you write the names in a scriptable
way. For instance:

I had samples, and for each sample, I had to do two measurements:
- theta R
- theta L
so I named my files like this:
(with sample the name of the sample)

sample_R_.csv
sample_L_.csv

like this, I can select the theta_R file with the condition
("_R_" in filename)
***** pre_processing
processing the raw data so that it's easier to use in a script
(putting everything in a dataframe and saving as json and csv)
****** output
****** scripts
****** input
eventually if you have parameters/metadata or something else...
***** processing
****** output
the output of your script (/can/ be divided in folders like:)
- test_output
  if you wanna test things
- report_output
  for your report
- interesting_output
  for anything not for the processing but still interesting
- archive
  if you wanna keep some valuable things but that you don't use
****** scripts
your scripts (can be divided in folders like:)
- general_functions
- processing1
- processing2
- ...
i usually just have:
- processing_script.py
- functions.py
in this folder
****** input
***** post_processing
in case you need post processing to make it more pleasant to see, or
just nice for your report
(graphs, csv files with beautiful columns...)
****** output
****** scripts
****** input
** other useful soft
*** Makefile
**** intro
10/13/2021

A Makefile is a file called =Makefile=.  Inside, there is a script
helping to build your project structure, with a lot of tools for file
creation.

:gcult: It comes from a tool created to help compile compiled program
languages.

**** how it works
The =make= command searchs for Makefile file, and if he doesn't find
it, he searchs for a file with "Makefile" in it.

=make= checks the timestamps of the files and the output file to see
if there is a dependency that is more recent. If there is, he will
rebuild the thing.

and it will run the first block it finds in the =makefile=
**** example

example with Book.txt as the output book, depending on intro.txt,
chap1.txt, and chap2.txt

#+begin_src makefile
Book.txt: intro.txt chap1.txt chap2.txt
	cat intro.txt chap1.txt chap2.txt > Book.txt
#+end_src

**** silent mode
if you don't want to have the command printed:
#+begin_src makefile
Book.txt: intro.txt chap1.txt chap2.txt
	@cat intro.txt chap1.txt chap2.txt > Book.txt
#+end_src

**** the lazy way

equivalent way to write:
#+begin_src makefile
Book.txt: intro.txt chap1.txt chap2.txt
	@cat $^ > Book.txt
#+end_src

**** macros

equivalent way to write with macros:
#+begin_src makefile
TARGET=Book.txt
CHAPTERS=intro.txt chap1.txt chap2.txt

$(TARGET): $(CHAPTERS)
	@cat $^ > $(TARGET)
#+end_src

**** dummies
if there are no extensions, it will execute the thing always:
here the operations defined after "clean:" will be executed no matter
what.

It's like a dummy target file called clean!
#+begin_src makefile
PAPER=paper1

$(PAPER).pdf: $(PAPER).tex
	pdflatex $^

clean:
	rm -f *.out *aux *bbl *blg *log *toc *.ptb *.tod *.fls *.fdb*_latexmk *.lof
#+end_src

does the same:
#+begin_src makefile
PAPER=paper1

%.pdf: %.tex
	pdflatex $^

clean:
	rm -f *.out *aux *bbl *blg *log *toc *.ptb *.tod *.fls *.fdb*_latexmk *.lof
#+end_src

*** Docker
**** intro
A docker is a container. A platform for building, running, and
shipping applications. Why bother?

Because if it works on your computer, it rarely works in another. Here
is where Docker shines.

Why not use VM? Docker is way lighter, and uses the pozer of the host
os! Plus, it starts very quickly.
**** usual commands
list of images
#+begin_src 
docker images
docker image ls
#+end_src

#+begin_src Dockerfile
docker build -t name-more-mame ./path/to/dockerfile
docker ps
docker cp containerID:/path/to/input/file ./path/to/destination
# to rebuild an image:
docker rmi --force ImageID/ImageName
#+end_src

