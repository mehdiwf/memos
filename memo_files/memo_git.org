
 [[https://webtuu.com/blog/04/a-laymans-introduction-to-git][source]]
 [[https://git-scm.com/book/en/v2][another_good_source]]
* profile
git config --global user.name "Your Name Here"
git config --global user.email your@email.com
git config --global init.defaultBranch main

to disable high security if not needed
git config --global http.sslverify false
* project
** start
starts your git repository in /path/to/project
#+begin_src 
cd /path/to/project
git init
#+end_src
here, you create your git repository

** commiting changes
*** general idea
 when committing, you need to add files to a stage, then commit.

   file1, file2 in directory
         |
         |   (user modification on file1)
         v
   file1 is marked as changed
         |
         |   on CLI: "git add file1"
         v
   file1 changes are added on stage
         |
         |   on CLI: "git commit"
         v
  changes commited in your repository

anything that changes can be commited (file creation, deletion, modification...)

*** disclaimer
Remember, anything that is committed in Git can almost always be
recovered. Even commits that were on branches that were deleted or
commits that were overwritten with an --amend commit can be recovered
(see Data Recovery for data recovery). However, anything you lose that
was never committed is likely never to be seen again.  

*** standard stuff
add a file to track (to the 'stage')
#+begin_src 
git add file1 file2 
#+end_src

add everything in the folder
#+begin_src 
git add .
#+end_src

commiting with a simple message
#+begin_src 
git commit -m "message"
#+end_src

if you want to modify the message in you editor
the -a tells git to commit *all* modified/deleted tracked files
#+begin_src 
git commit -a 
#+end_src
*** correcting last commit
If you did a commit but fucked up something (you forgot to put
something in the log message, or to put a modification...)
You can modify the last commit with 
#+begin_src 
git commit --amend
#+end_src
the changes you make between your fucked up commit and your next will
be merged, overwritting the last commit (if you don't put -m to put a
message on the cli, you'll get your last message in your editor in
case you want to modify it but not overwrite it all)

example:
$ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend

You end up with a single commit — the second commit replaces the results of the first.

Only amend commits that are still local and have not been pushed
somewhere. Amending previously pushed commits and force pushing the
branch will cause problems for your collaborators. For more on what
happens when you do this and how to recover if you’re on the receiving
end read The Perils of Rebasing.  

*** managing the stage
# Unstaging a Staged File with git restore
git restore --staged file_to_unstage

*** discard/unmodify changes since last commit
If you don't like you modifications, you can undo them for a
particular file, to revert its state to the last commit state.
*BE CAREFUL THOUGH, YOU CAN'T GET THESE CHANGES BACK*

# Unmodifying a Modified File with git restore
git restore file_to_undo_changes

** undoing stuff
*** last commit
to delete the *last commit* while preserving the modifications on your
file: 

#+begin_src 
git reset "HEAD^"
#+end_src
*** file tracking on a file 
WARNING:
it also *removes* the file!!!
#+begin_src 
git rm -r --cached file_to_remove
#+end_src
** checking the project
*** in general
# check status of project
git status
# seeing the history of changes
git log
# seeing summarized log
git log --pretty=oneline
# check unstaged changes from last commit
git diff
*** for one particular commit
locate the 
** branches
*** intuition
you can have branches, switch between them, and modify them
inpedendently!

let's say this is your project "time line"

                   cooler but less formal idea
                 -------------------->
  first idea    /  more formal idea
---------------*--------------------->


And if you want to merge them later, you can!

      cooler but less formal idea
-----------------------
  more formal idea     \  finally let's have the cooler idea
------------------------*--------------------->

you have a "main" branch (called master in the past I think), the
trunk, from where other branchers go, but you can have many branches:


                           small variation 1
           ----------------------------------------->
  main    /                main
---------*-----------*------------------------------>
                      \    small variation 2
                       ----------------------------->
*** manage branches
**** conventions
naming conventions when working in groups:
InitialsSix_Digits_birthdate/Name
so if you are Marc Zoulala, born in 17 january 1994, and you want to
create something to fix bug number 88, you put:
mz170194/bugfix88
**** commands
# create a branch from a copy of the branch you are currently in
git checkout -b your_branch_name
# look at branches locally available, and shows your location
git branch
# merging into main if you're working solo
git checkout main
git merge your_branch_name 
# merging into main on github
# first go in the branch you want to merge
git checkout your_branch_name 
# then "push" your modifications
git push -u origin your_branch_name 
** tags
[[https://git-scm.com/book/en/v2/Git-Basics-Tagging][source]]
*** listing/searching tags
# list all tags
git tag
# to search a regexp in the tag list
git tag -l "v1.2*"
# show/see tag information with tag name
git show v1.4
*** create tag for the current commit
# create an *annotated* tag (v1.4 is the tag name)
git tag -a v1.4 -m "my message for the tag"
# create a lightweight tag 
git tag v1.4-lw

*** create tag for an older commit
# you can check the commits like this
git log --pretty=oneline
# and then create the tag with the uuid (or a sufficient part of it)
git tag -a v1.2 9fceb02
*** deleting tags
# deleting a tag with its name:
git tag -d v1.4
# remark for remote servers
Note that this does not remove the tag from any remote servers. There
are two common variations for deleting a tag from a remote server.

The first variation is git push <remote> :refs/tags/<tagname>

$ git push origin :refs/tags/v1.4-lw
To /git@github.com:schacon/simplegit.git
 - [deleted]         v1.4-lw

The way to interpret the above is to read it as the null value before
the colon is being pushed to the remote tag name, effectively deleting
it.

The second (and more intuitive) way to delete a remote tag is with:

$ git push origin --delete <tagname>



*** pushing tags
# to push your commits AND your tags:
git push origin --tags
* remote repositories
to add a reference point (an online repo you will use a lot)
for instance
#+begin_src
git remote add ref_name git@github.com:webtuu/git_basics.git
#+end_src

When you do that, you add "ref_name", the name pointing to the
original project repository. You can only read from this remote.

It also adds "origin", pointing to your remote branch where your fork
lives. You can read and write stuff to this remote.

* Numerical project course
** commit message
pay attention to message size, and don't crank a lot of things (typo,
bugfix, ...) in one commit

:tip: don't crank a lot of things (typo, bugfix, ...) in one commit

** how to ignore some files
.gitignore file can help for that
you can add files to this file, but also 

:tip: use 'git status -s' to have a short version

useful ressources!
https://github.com/github/gitignore

** log/diff
# setting your diff visual tool
git config --global diff.tool <the tool you wanna use>
# get 3 last commits
git log -3 
# get detailed info logs
git log -p
# filter
git log --author="ali"
# having all the info in one line
git log --oneline
# greping smartly logs
git log --grep="word"
# show a specific commit (you don't need to copy all the uuid, just a part of it)
git show b3269f3
# see the differences between two commits
git diff 67865..8734
# 
git log 

** branches

the main/master branch is always the branch that is presentable to
your supervisors/..

you have a developping branch, where you make changes that can be very
deep in your project

HEAD is where your last commit is

# see branches you have on the remote repo
git branch --remote
# create newbranch from the last commit
git branch new_branch
# change branch 
git checkout new_branch
git switch new_branch
# to create a branch from the key 23hjsd7s
git branch other_branch 23hjsd7s
# rename the branch you are on
git branch -m new_name
# rename a branch you are not on
git branch -m old_name new_name

*** merging
# you need to switch to the branch you want to merge in, and merge 
git switch new_branch
git merge dev_branch
*** rebasing
you may want to rebase a branch, to have all commits in one
branch. But it may be annoying for the team!
*** collabs
on newbranch
commit
switch to master
pull
switch to newbranch
merge master to newbranch
talk to other to sort conflict
switch to master and push

:tip: ALWAYS fix merging problems in your personal branch
** tags
# add tags to commits
git tag v2.5 1b21d63ff

** remote repo
# after setting things up with 
git push -u origin

# and then:
git push
git pull

